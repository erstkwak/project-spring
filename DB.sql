--------------------------------------------------
-- DB 세팅
--------------------------------------------------

CREATE TABLE MEMBER (
   MEM_IDX NUMBER(5, 0)
 , MEM_ID VARCHAR2(100)
 , MEM_PW VARCHAR2(100) NOT NULL
 , MEM_NAME VARCHAR2(100) NOT NULL
 , MEM_GENDER VARCHAR2(100) NOT NULL
 , MEM_BIRTH VARCHAR2(100) NOT NULL
 , MEM_EMAIL VARCHAR2(100) NOT NULL
 , MEM_PHONE VARCHAR2(100) NOT NULL
 , MEM_ZIPCODE VARCHAR2(100) NOT NULL
 , MEM_ADDRESS VARCHAR2(100) NOT NULL
 , MEM_DETAILADDRESS VARCHAR2(100) NOT NULL
 , MEM_REGDATE VARCHAR2(100) NOT NULL
 , MEM_WITHDRAW VARCHAR2(100)
 , MEM_POINT NUMBER(5, 0)
 , CONSTRAINT PK_MEMBER PRIMARY KEY(MEM_ID)
);

CREATE TABLE SHOPPING_GOODS (
   GOODS_IDX NUMBER(5,0)
 , GOODS_NAME VARCHAR2(100 BYTE)
 , GOODS_PRICE NUMBER(5,0)
 , GOODS_POINT NUMBER(5,0)
 , DELIVERY_PRICE NUMBER(5,0)
 , DELIVERY_DATE VARCHAR2(100 BYTE)
 , GOODS_INFO VARCHAR2(2000 BYTE)
 , GOODS_REGDATE VARCHAR2(100 BYTE)
 , CONSTRAINT PK_SHOPPING_GOODS PRIMARY KEY(GOODS_IDX)
);

CREATE TABLE SHOPPING_ORDER (
   ORDER_IDX NUMBER(5,0)
 , MEM_ID VARCHAR2(100)
 , MEM_NAME VARCHAR2(100 BYTE)
 , MEM_PHONE VARCHAR2(100 BYTE)
 , GOODS_IDX NUMBER(5,0)
 , GOODS_NAME VARCHAR2(100 BYTE)
 , GOODS_QTY NUMBER(5,0)
 , GOODS_PRICE NUMBER(5,0)
 , GOODS_FILENAME VARCHAR2(100 BYTE)
 , DELIVERY_ADDRESS VARCHAR2(300 BYTE)
 , PAY_METHOD VARCHAR2(100 BYTE)
 , CARD_NAME VARCHAR2(100 BYTE)
 , DELIVERY_STATUS VARCHAR2(100 BYTE)
 , ORDER_TIME VARCHAR2(100 BYTE)
 , CONSTRAINT PK_SHOPPING_ORDER PRIMARY KEY(ORDER_IDX)
 , CONSTRAINT FK_SHOPPING_ORDER FOREIGN KEY(MEM_ID) REFERENCES MEMBER(MEM_ID)
 , FOREIGN KEY(GOODS_IDX) REFERENCES SHOPPING_GOODS(GOODS_IDX)
);

CREATE TABLE GOODS_IMG (
   IMG_IDX NUMBER(5,0) --bno
 , GOODS_IDX NUMBER(5,0)
 , IMG_NAME VARCHAR2(100 BYTE) --uuid
 , FILENAME VARCHAR2(100 BYTE)
 , FILETYPE VARCHAR2(100 BYTE)
 , UPLOADPATH VARCHAR2(200 BYTE)
 , IMG_REGDATE VARCHAR2(100 BYTE)
 , CONSTRAINT PK_GOODS_IMG PRIMARY KEY(IMG_IDX)
 , CONSTRAINT FK_GOODS_IMG FOREIGN KEY(GOODS_IDX) REFERENCES SHOPPING_GOODS(GOODS_IDX)
);

CREATE TABLE SHIPPING_CART (
   CART_IDX NUMBER(5,0)
 , GOODS_IDX NUMBER(5,0)
 , MEM_ID VARCHAR2(100)
 , ORDER_IDX NUMBER(5,0)
 , GOODS_QTY NUMBER(5,0)
 , DEL_YN VARCHAR2(100 BYTE) DEFAULT 'N'
 , CONSTRAINT PK_SHIPPING_CART PRIMARY KEY(CART_IDX)
 , CONSTRAINT FK_SHIPPING_CART FOREIGN KEY(MEM_ID) REFERENCES MEMBER(MEM_ID)
 , FOREIGN KEY(GOODS_IDX) REFERENCES SHOPPING_GOODS(GOODS_IDX)
);

CREATE SEQUENCE SEQ_GOODS_IDX;
CREATE SEQUENCE SEQ_IMG_IDX;

CREATE TABLE qna_post (
   p_no NUMBER(8, 0)
 , p_title VARCHAR2(300) NOT NULL
 , p_content VARCHAR2(3000) NOT NULL
 , MEM_ID VARCHAR2(100) NOT NULL
 , p_replycount NUMBER(8, 0) DEFAULT 0
 , p_writedate DATE DEFAULT sysdate
 , p_updatedate DATE DEFAULT sysdate
);

ALTER TABLE qna_post ADD CONSTRAINT pk_post PRIMARY KEY (p_no);
ALTER TABLE qna_post ADD CONSTRAINT fk_post_member FOREIGN KEY (mem_id) REFERENCES member (mem_id);
CREATE SEQUENCE seq_post;

CREATE TABLE qna_reply (
   r_no NUMBER(8, 0)
 , r_reply VARCHAR2(1000) NOT NULL
 , MEM_ID VARCHAR2(100) NOT NULL
 , r_writedate DATE DEFAULT sysdate
 , r_updatedate DATE DEFAULT sysdate
 , p_no NUMBER(8, 0) NOT NULL
);

ALTER TABLE qna_reply ADD CONSTRAINT pk_reply PRIMARY KEY (r_no);
ALTER TABLE qna_reply ADD CONSTRAINT fk_reply_post_no FOREIGN KEY (p_no) REFERENCES qna_post (p_no) ON DELETE CASCADE;
ALTER TABLE qna_reply ADD CONSTRAINT fk_reply_post_id FOREIGN KEY (mem_id) REFERENCES member (mem_id);
CREATE SEQUENCE seq_reply;

CREATE TABLE qna_attach (
   a_uuid VARCHAR2(100) NOT NULL
 , a_savepath VARCHAR2(300) NOT NULL
 , a_filename VARCHAR2(100) NOT NULL
 , a_isimage CHAR(1) DEFAULT 'I'
 , p_no NUMBER(8, 0)
);

ALTER TABLE qna_attach ADD CONSTRAINT pk_attach PRIMARY KEY (a_uuid);
ALTER TABLE qna_attach ADD CONSTRAINT fk_attach_post FOREIGN KEY (p_no) REFERENCES qna_post(p_no) ON DELETE CASCADE;

CREATE TABLE PBOARD (
   IDX NUMBER(5, 0) NOT NULL 
 , TITLE VARCHAR2(200) NOT NULL
 , MEM_ID VARCHAR2(100) NOT NULL
 , IMG_URL VARCHAR2(300)
 , CONT VARCHAR2(4000) NOT NULL
 , REGDATE VARCHAR2(300)
);

ALTER TABLE PBOARD ADD CONSTRAINT pk_pboard PRIMARY KEY (IDX);
ALTER TABLE PBOARD ADD CONSTRAINT fk_pboard_member FOREIGN KEY (MEM_ID) REFERENCES MEMBER (MEM_ID);

CREATE TABLE COMMENTS (
   IDX NUMBER(5, 0) NOT NULL
 , MEM_ID VARCHAR2(100) NOT NULL
 , COMMENT_NUM NUMBER(5, 0) NOT NULL
 , COMMENT_CONTENT VARCHAR2(300) NOT NULL
 , COMMENT_REGDATE VARCHAR2(100)
 , CONSTRAINT COMMENT_PK PRIMARY KEY (COMMENT_NUM)
 , CONSTRAINT FK_COMMENT_IDX FOREIGN KEY (IDX) REFERENCES PBOARD (IDX) ON DELETE CASCADE
);

ALTER TABLE comments ADD CONSTRAINT fk_comments_member FOREIGN KEY (mem_id) REFERENCES member (mem_id);
CREATE SEQUENCE seq_comments;

CREATE TABLE TB_VISITOR (
  VISIT_TIME DATE NOT NULL
);

CREATE TABLE notice_board (
   mem_id VARCHAR2(100) NOT NULL
 , nb_no NUMBER(8,0)
 , nb_title VARCHAR2(300) NOT NULL
 , nb_content VARCHAR2(3000) NOT NULL
 , nb_regdate DATE DEFAULT SYSDATE
 , nb_modate DATE DEFAULT SYSDATE
 , nb_replycount NUMBER(8,0) DEFAULT 0
 , nb_count NUMBER(8,0) DEFAULT 0
 , nb_likecheck NUMBER(1,0) DEFAULT 0
 , nb_available NUMBER(1,0) DEFAULT 0
);

ALTER TABLE notice_board ADD CONSTRAINT pk_board PRIMARY KEY (nb_no);
ALTER TABLE notice_board ADD CONSTRAINT fk_board_member FOREIGN KEY (mem_id) REFERENCES member (mem_id);
CREATE SEQUENCE NBOARD_SEQ;

CREATE TABLE notice_reply (
   mem_id VARCHAR2(100) NOT NULL
 , nr_no NUMBER(8,0)
 , nr_content VARCHAR2(1000) not null
 , nr_regdate DATE DEFAULT SYSDATE
 , nr_modate DATE DEFAULT SYSDATE
 , nr_available NUMBER(1,0) DEFAULT 0
 , nb_no NUMBER(8,0) NOT NULL
);

ALTER TABLE notice_reply ADD CONSTRAINT pk_notice_reply PRIMARY KEY (nr_no);
ALTER TABLE notice_reply ADD CONSTRAINT fk_reply_board_no FOREIGN KEY (nb_no) REFERENCES notice_board (nb_no) ON DELETE CASCADE;
ALTER TABLE notice_reply ADD CONSTRAINT fk_reply_board_id FOREIGN KEY (mem_id) REFERENCES member (mem_id);
CREATE SEQUENCE NREPLY_SEQ;

--------------------------------------------------
-- 패키지 PKG_MEMBER
--------------------------------------------------

create or replace PACKAGE PKG_MEMBER AS

PROCEDURE PROC_MEMBER_INSERT (
   IN_MEM_ID IN VARCHAR2
 , IN_MEM_PW IN VARCHAR2
 , IN_MEM_NAME IN VARCHAR2
 , IN_MEM_GENDER IN VARCHAR2
 , IN_MEM_BIRTH IN VARCHAR2
 , IN_MEM_EMAIL IN VARCHAR2
 , IN_MEM_PHONE IN VARCHAR2
 , IN_MEM_ZIPCODE IN VARCHAR2
 , IN_MEM_ADDRESS IN VARCHAR2
 , IN_MEM_DETAILADDRESS IN VARCHAR2
);

PROCEDURE PROC_MEMBER_LIST ( O_CUR OUT SYS_REFCURSOR );

END PKG_MEMBER;

--------------------------------------------------
-- 패키지 PKG_MEMBER BODY
--------------------------------------------------

create or replace PACKAGE BODY PKG_MEMBER AS

PROCEDURE PROC_MEMBER_INSERT (
   IN_MEM_ID IN VARCHAR2
 , IN_MEM_PW IN VARCHAR2
 , IN_MEM_NAME IN VARCHAR2
 , IN_MEM_GENDER IN VARCHAR2
 , IN_MEM_BIRTH IN VARCHAR2
 , IN_MEM_EMAIL IN VARCHAR2
 , IN_MEM_PHONE IN VARCHAR2
 , IN_MEM_ZIPCODE IN VARCHAR2
 , IN_MEM_ADDRESS IN VARCHAR2
 , IN_MEM_DETAILADDRESS IN VARCHAR2
) AS
BEGIN
  INSERT INTO MEMBER (
   MEM_IDX
 , MEM_ID
 , MEM_PW
 , MEM_NAME
 , MEM_GENDER
 , MEM_BIRTH
 , MEM_EMAIL
 , MEM_PHONE
 , MEM_ZIPCODE
 , MEM_ADDRESS
 , MEM_DETAILADDRESS
 , MEM_REGDATE
 , MEM_WITHDRAW
 , MEM_POINT
)
VALUES (
   (select nvl(max(MEM_IDX), 0) + 1 from MEMBER)
 , IN_MEM_ID
 , IN_MEM_PW
 , IN_MEM_NAME
 , IN_MEM_GENDER
 , IN_MEM_BIRTH
 , IN_MEM_EMAIL
 , IN_MEM_PHONE
 , IN_MEM_ZIPCODE
 , IN_MEM_ADDRESS
 , IN_MEM_DETAILADDRESS
 , (TO_CHAR(SYSDATE, 'YYYY-MM-DD'))
 , '0'
 , 1000
);
END PROC_MEMBER_INSERT;

PROCEDURE PROC_MEMBER_LIST (
 O_CUR OUT SYS_REFCURSOR
) AS
BEGIN
OPEN O_CUR FOR
 SELECT
   MEM_IDX
 , MEM_ID
 , MEM_PW
 , MEM_NAME
 , MEM_GENDER
 , MEM_BIRTH
 , MEM_EMAIL
 , MEM_PHONE
 , MEM_ZIPCODE
 , MEM_ADDRESS
 , MEM_DETAILADDRESS
 , MEM_REGDATE
 , MEM_WITHDRAW
 , MEM_POINT
 FROM MEMBER
 ORDER BY MEM_REGDATE ASC;
END PROC_MEMBER_LIST;

END PKG_MEMBER;